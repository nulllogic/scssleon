@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';

@use 'properties';
@use 'wrapper';

@use '../../functions' as functions;

@mixin generate-component($component, $class, $config, $theme, $options : ()) {
  $theme-component: '';

  // Checking, if the component was previously defined inside theme's components
  @if (meta.type-of($component) == 'string') {
    /* Loading component settings and styling */
    $theme-component: functions.get-theme(
            $theme,
            'components' + '.' + $component
    );
  } @else {
    $theme-component: $component;
  }

  @each $scheme in string.split(functions.get-config($config, "color-scheme"), " ") {

    @if $scheme == 'light' {
      .#{$class} {
        @include properties.generate-properties($class, $theme-component, $config, $options);
      }
    }

    @if $scheme == 'dark' {
      :global([data-theme="#{$scheme}"] .#{$class}) {
        @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
          only_dark_colors : true,
        ), $config));
      }
    }
  }
}

@mixin generate-components($components, $config, $theme) {
  // Check, if components are not empty
  @if (meta.type-of($components) == 'list' and list.length($components) > 0) {
    @each $component in $components {
      @include generate-component(list.nth($component, 1), list.nth($component, 2), $config, $theme)
    }
  }
}

@mixin get-structure($component) {
  @debug $component;
}