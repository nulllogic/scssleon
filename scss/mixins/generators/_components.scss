@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';

@use 'properties';

@use '../../functions' as functions;

@mixin generate-component($component, $class, $config, $theme, $options : ()) {
  $theme-component: '';

  $color_scheme: functions.get-config($config, 'color-scheme');
  $is_wrapper_enabled: functions.get-config($config, 'enable.wrapper');
  $wrapper_class: functions.get-config($config, 'wrapper');

  // Checking, if the component was previously defined inside theme's components
  @if (meta.type-of($component) == 'string') {
    /* Loading component settings and styling */
    $theme-component: functions.get-theme(
        $theme,
        'components' + '.' + $component
    );
  } @else {
    $theme-component: $component;
  }

  @each $scheme in string.split(functions.get-config($config, 'color-scheme'), ' ') {

    @if $scheme == 'light' {
      @if ($is_wrapper_enabled) {
        #{$wrapper_class} {
          .#{$class} {
            @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
              scheme: $scheme,
            ), $options));
          }
        }
      } @else {
        .#{$class} {
          @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
            scheme: $scheme,
          ), $options));
        }
      }
    }

    @if $scheme == 'dark' {
      @if ($is_wrapper_enabled) {
        #{$wrapper_class}[data-theme="#{$scheme}"] {
          .#{$class}:where([data-theme="#{$scheme}"], [data-theme="#{$scheme}"] *) {
            @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
              scheme: $scheme,
            ), $options));
          }
        }

      } @else {
        .#{$class}:where([data-theme="#{$scheme}"], [data-theme="#{$scheme}"] *) {
          @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
            scheme: $scheme,
          ), $options));
        }

      }
    }
  }
}

@mixin generate-components($components, $config, $theme) {
  // Check, if components are not empty
  @if (meta.type-of($components) == 'list' and list.length($components) > 0) {
    @each $component in $components {
      @include generate-component(list.nth($component, 1), list.nth($component, 2), $config, $theme)
    }
  }
}

@mixin get-structure($component) {
  @debug $component;
}