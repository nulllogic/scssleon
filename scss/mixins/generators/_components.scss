@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';

@use 'properties';

@use '../../functions' as functions;

@mixin generate-component($component, $class, $config, $theme, $options : ()) {
  $theme-component: '';
  $color_scheme: functions.get-config($config, 'color-scheme');

  // Checking, if the component was previously defined inside theme's components
  @if (meta.type-of($component) == 'string') {
    /* Loading component settings and styling */
    $theme-component: functions.get-theme(
        $theme,
        'components' + '.' + $component
    );
  } @else {
    $theme-component: $component;
  }

  @each $scheme in string.split(functions.get-config($config, 'color-scheme'), ' ') {

    @if $scheme == 'light' {
      .#{$class} {
        @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
          scheme: $scheme,
        ), $options));
      }
    }

    @if $scheme == 'dark' {
      .#{$class}:where([data-theme="#{$scheme}"], [data-theme="#{$scheme}"] *) {
        @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
          scheme: $scheme,
        ), $options));
      }
    }
  }
}

@mixin generate-components($components, $config, $theme) {

  // Get components
  @each $component in $components {
    // Component options param check
    @if (list.length($component) > 2) {
      @include generate-component(
          list.nth($component, 1),
          list.nth($component, 2),
        $config: $config,
        $theme: $theme,
        $options: list.nth($component, 3),
      )
    } @else {
      @include generate-component(
          list.nth($component, 1),
          list.nth($component, 2),
        $config: $config,
        $theme: $theme,
      )
    }
  }
}

@mixin get-structure($component) {
  @debug $component;
}