@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';

@use 'properties';

@use '../../functions' as functions;

@mixin generate-component($component, $class, $config, $theme, $options : ()) {
  $theme-component: '';

  $color_scheme: functions.get-config($config, 'color-scheme');
  $is_wrapper_enabled: functions.get-config($config, 'enable.wrapper');
  $wrapper_class: functions.get-config($config, 'wrapper');

  // Checking, if the component was previously defined inside theme's components
  @if (meta.type-of($component) == 'string') {
    /* Loading component settings and styling */
    $theme-component: functions.get-theme(
        $theme,
        'components' + '.' + $component
    );
  } @else {
    $theme-component: $component;
  }

  @each $scheme in string.split(functions.get-config($config, 'color-scheme'), ' ') {

    @if $scheme == 'light' {
      @if ($is_wrapper_enabled) {
        #{$wrapper_class} {
          .#{$class} {
            @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
              scheme: $scheme,
            ), $options));
          }
        }
      } @else {
        .#{$class} {
          @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
            scheme: $scheme,
          ), $options));
        }
      }
    }

    @if $scheme == 'dark' {
      @if ($is_wrapper_enabled) {
        #{$wrapper_class}[data-theme="#{$scheme}"] {
          .#{$class}:where([data-theme="#{$scheme}"], [data-theme="#{$scheme}"] *) {
            @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
              scheme: $scheme,
            ), $options));
          }
        }

      } @else {
        .#{$class}:where([data-theme="#{$scheme}"], [data-theme="#{$scheme}"] *) {
          @include properties.generate-properties($class, $theme-component, $config, map.deep-merge((
            scheme: $scheme,
          ), $options));
        }

      }
    }
  }
}

@mixin generate-components($args...) {

  // Get components
  @for $i from 0 to list.length($args) {
    $component: list.nth($args, $i + 1);

    @if ($component != null) {

      // Checking, if we have `options` as last param at component args list
      @if(list.length($component) > 4) {
        @include generate-component(
            list.nth($component, 1),
            list.nth($component, 2),
          $config: list.nth($component, 3),
          $theme: list.nth($component, 4),
          $options: list.nth($component, 5),
        )
      } @else {
        @include generate-component(
            list.nth($component, 1),
            list.nth($component, 2),
          $config: list.nth($component, 3),
          $theme: list.nth($component, 4),
        )
      }

    }
  }
}

@mixin get-structure($component) {
  @debug $component;
}