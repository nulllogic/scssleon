@use "sass:meta";
@use "sass:string";
@use "sass:map";
@use "sass:list";

@use "../../functions" as functions;

@mixin generate-css-properties($tag, $property, $value, $config, $options : ()) {

  $prefix: functions.get-config($config, 'prefix');

  $variable_options_custom_name: functions.get-config($options, 'variable.name');
  $variable_options_exclude: functions.get-config($options, 'variable.exclude');

  $variable_name: $tag;

  $exclude: false;

  @if ($variable_options_custom_name != nil) {
    $variable_name: $variable_options_custom_name;
  }

  @if ($variable_options_exclude != nil) {

    @if (meta.type-of($variable_options_exclude) == list) {
      @each $variable_to_exclude in $variable_options_exclude {
        @if string.index($property, --#{$variable_to_exclude}) {
          $exclude: true
        }
      }
    }

    @if (meta.type-of($variable_options_exclude) == string) {
      @if string.index($property, --#{$variable_options_exclude}) {
        $exclude: true
      }
    }
  }

  @if ($exclude != true) {
    --#{$prefix}-#{$variable_name}-#{functions.replace($property, '--', '')}: #{meta.inspect(
      $value
    )};
  } @else {
    --#{$prefix}-#{functions.replace($property, '--', '')}: #{meta.inspect(
      $value
    )};
  }

}

@mixin generate-css-variables($tag, $property, $value, $config, $options) {
  $prefix: functions.get-config($config, 'prefix');

  $variable_options_custom_name: functions.get-config($options, 'variable.name');
  $variable_options_exclude: functions.get-config($options, 'variable.exclude');

  $variable_name : $tag;

  @if ($variable_options_custom_name != nil) {
    $variable_name: $variable_options_custom_name;
  }

  @if (meta.type-of($value) == 'string' and string.index($value, 'var(--') == 1) {

    #{$property}: #{meta.inspect(
        functions.replace($value, '--', '--' + $prefix + '-' + $variable_name + '-')
      )};

  } @else if (meta.type-of($value) == 'string' and string.index($value, 'var(global(') == 1) {

    #{$property}: #{meta.inspect(
        functions.replace(
          string.slice($value, 0, string.length($value) - 1),
          'global(--',
          '--' + $prefix + '-root-'
        )
      )};

  } @else {

    #{$property}: #{meta.inspect($value)};

  }
}

@mixin generate-colors($tag, $value, $config, $options, $requested_color : 'light') {
  $prefix: functions.get-config($config, 'prefix');

  @each $color, $color-properties in $value {
    @if ($color == $requested_color) {
      @each $color-property, $color-value in $color-properties {
        @include generate-css-properties($tag, $color-property, $color-value, $config, $options);
      }
    }
  }
}

@mixin generate-subclasses($tag, $class, $properties, $config, $options : ()) {
  #{$class} {
    @include generate-properties($tag, $properties, $config, $options);
  }
}

@mixin generate-responsive($tag, $properties, $config) {
  $breakpoints: functions.get-config($config, 'breakpoints');

  @each $property, $value in $properties {
    $has-matched-breakpoint: false;

    @each $breakpoint, $width in $breakpoints {
      @if ($property == $breakpoint) {
        $has-matched-breakpoint: true;
      }
    }

    @if ($has-matched-breakpoint) {
      $width: map.get($breakpoints, $property);

      @media (min-width: $width) {
        @include generate-properties($tag, $value, $config);
      }

    } @else {
      @warn '❗️Invalid breakpoint '#{$property}'.';
    }

  }
}

@mixin generate-atrule($tag, $value, $config, $options) {
  @each $at-rule, $properties in $value {
    // Keep @ at the beginning
    @#{functions.replace($at-rule, '@', '')} {
      @include generate-properties($tag, $properties, $config, $options);
    }
  }
}

@mixin generate-print($tag, $value, $config, $options) {
  //@TODO
}

@mixin generate-animation($tag, $value, $config, $options) {
  @each $name, $properties in $value {
    // Check, if _animation is not empty ;;
    @if (meta.type-of($properties) != 'list') {
      @keyframes #{$name} {
        @each $offset, $offset-value in $properties {
          #{$offset} {
            @include generate-properties($tag, $offset-value, $config, $options);
          }
        }
      }
    }
  }
}

@mixin generate-properties($tag, $properties, $config, $options : ()) {
  $prefix: functions.get-config($config, 'prefix');
  $is_scheme_dark: functions.get-config($options, 'scheme') != nil and functions.get-config($options, 'scheme') == 'dark';

  @if (not $is_scheme_dark) {
    @each $property, $value in $properties {
      // Variables
      // Looking for "--" symbols in the beginning of the property
      // Example: --flex-direction : row
      @if (
        meta.type-of($property) == 'string' and string.index($property, "--") == 1
      ) {
        @include generate-css-properties($tag, $property, $value, $config, $options);
      }

      // Colors
      @else if ($property == '_colors') {
        @include generate-colors($tag, $value, $config, $options, 'light');
      }

      // Responsive
      @else if ($property == '_responsive') {
        @include generate-responsive($tag, $value, $config);
      }

      // Sub classes
      @else if ($property == "_subclasses") {
        @each $class, $class_properties in $value {
          @include generate-subclasses($tag, $class, $class_properties, $config, $options);
        }
      }

      // At-rules
      @else if ($property == '_atrule') {
        @include generate-atrule($tag, $value, $config, $options);
      }

      // Animations
      @else if ($property == '_animations') {
        @include generate-animation($tag, $value, $config, $options);
      } @else {
        @include generate-css-variables($tag, $property, $value, $config, $options);
      }
    }
  } @else {
    @each $property, $value in $properties {
      @if ($property == '_colors') {
        @include generate-colors($tag, $value, $config, $options, 'dark');
      } @else if ($property == '_subclasses') {
        @each $class, $class_properties in $value {
          @include generate-subclasses($tag, $class, $class_properties, $config, $options);
        }
      }
    }
  }
}
